name: Deploy Partisia Indexer

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment'
        required: true
        type: choice
        options:
          - production
          - development
      server:
        description: 'Server'
        required: true
        type: choice
        options:
          - helhetz01
          - helhetz02

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set environment
        run: |
          echo "ENVIRONMENT=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          
          if [[ "${{ github.event.inputs.server }}" == "helhetz01" ]]; then
            echo "SERVER_HOST=helhetz01.romenet.io" >> $GITHUB_ENV
            echo "PORTS_PREFIX=${{ github.event.inputs.environment == 'production' && '17' || '27' }}" >> $GITHUB_ENV
            echo "SSH_KEY_SECRET=SSH_PRIVATE_KEY_HELHETZ01" >> $GITHUB_ENV
          else
            echo "SERVER_HOST=helhetz02.romenet.io" >> $GITHUB_ENV
            echo "PORTS_PREFIX=${{ github.event.inputs.environment == 'production' && '18' || '28' }}" >> $GITHUB_ENV
            echo "SSH_KEY_SECRET=SSH_PRIVATE_KEY_HELHETZ02" >> $GITHUB_ENV
          fi
          
          echo "PROJECT_NAME=partisia-indexer-${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          echo "DEPLOY_PATH=/home/partisia/partisia-indexer-${{ github.event.inputs.environment }}" >> $GITHUB_ENV

      - uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ github.event.inputs.server == 'helhetz01' && secrets.SSH_PRIVATE_KEY_HELHETZ01 || secrets.SSH_PRIVATE_KEY_HELHETZ02 }}

      - name: Create docker-compose
        run: |
          cat > docker-compose.${{ env.ENVIRONMENT }}.yaml << 'COMPOSE_EOF'
          name: ${{ env.PROJECT_NAME }}
          services:
            postgres:
              image: postgres:16.5
              restart: always
              environment:
                POSTGRES_PASSWORD: letmein
                POSTGRES_USER: indexer
                POSTGRES_DB: ls_indexer
              volumes:
                - pgdata_${{ env.ENVIRONMENT }}:/var/lib/postgresql/data
                - ./src/db/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
              ports:
                - '${{ env.PORTS_PREFIX }}432:5432'
              networks:
                - partisia_net

            indexer:
              build: .
              restart: always
              depends_on:
                - postgres
              environment:
                - PARTISIA_API_URL=https://reader.partisiablockchain.com
                - LS_CONTRACT=02fc82abf81cbb36acfe196faa1ad49ddfa7abdda6
                - DEPLOYMENT_BLOCK=10547814
                - DB_HOST=postgres
                - DB_PORT=5432
                - DB_NAME=ls_indexer
                - DB_USER=indexer
                - DB_PASSWORD=letmein
                - INDEXER_BATCH_SIZE=1000
                - INDEXER_CONCURRENCY=10
                - INDEX_INTERVAL_S=10
                - API_PORT=3002
                - COINGECKO_API_KEY=${{ secrets.COINGECKO_API_KEY || 'CG-WHeHa5zx8cdGLqhAvbzDTZXh' }}
              ports:
                - '${{ env.PORTS_PREFIX }}942:3002'
              networks:
                - partisia_net

          networks:
            partisia_net:
              name: partisia_net_${{ env.ENVIRONMENT }}

          volumes:
            pgdata_${{ env.ENVIRONMENT }}:
          COMPOSE_EOF

      - name: Deploy
        run: |
          set -e
          ssh-keyscan -H ${{ env.SERVER_HOST }} >> ~/.ssh/known_hosts 2>/dev/null
          
          ssh partisia@${{ env.SERVER_HOST }} "mkdir -p ${{ env.DEPLOY_PATH }}/src/db"
          
          tar -czf deploy.tar.gz src package.json tsconfig.json Dockerfile bun.lock docker-compose.${{ env.ENVIRONMENT }}.yaml
          scp deploy.tar.gz partisia@${{ env.SERVER_HOST }}:${{ env.DEPLOY_PATH }}/
          
          ssh partisia@${{ env.SERVER_HOST }} << 'DEPLOY_EOF'
            set -e
            cd ${{ env.DEPLOY_PATH }}
            tar -xzf deploy.tar.gz
            rm deploy.tar.gz
            
            docker compose -f docker-compose.${{ env.ENVIRONMENT }}.yaml down 2>/dev/null || true
            docker compose -f docker-compose.${{ env.ENVIRONMENT }}.yaml build --no-cache
            docker compose -f docker-compose.${{ env.ENVIRONMENT }}.yaml up -d
            
            sleep 10
            docker compose -f docker-compose.${{ env.ENVIRONMENT }}.yaml ps
            
            if ! curl -sf http://localhost:${{ env.PORTS_PREFIX }}942/health > /dev/null; then
              echo "Health check failed"
              docker compose -f docker-compose.${{ env.ENVIRONMENT }}.yaml logs --tail=50
              exit 1
            fi
            
            echo "Deployment successful"
          DEPLOY_EOF

      - name: Verify deployment
        run: |
          sleep 5
          curl -sf http://${{ env.SERVER_HOST }}:${{ env.PORTS_PREFIX }}942/health || exit 1
          curl -sf http://${{ env.SERVER_HOST }}:${{ env.PORTS_PREFIX }}942/api || exit 1

      - name: Summary
        if: always()
        run: |
          cat >> $GITHUB_STEP_SUMMARY << 'SUMMARY_EOF'
          ### Deployment Summary
          - **Server**: ${{ env.SERVER_HOST }}
          - **Environment**: ${{ env.ENVIRONMENT }}
          - **API**: http://${{ env.SERVER_HOST }}:${{ env.PORTS_PREFIX }}942
          - **GraphQL**: http://${{ env.SERVER_HOST }}:${{ env.PORTS_PREFIX }}942/graphql
          - **PostgreSQL**: ${{ env.SERVER_HOST }}:${{ env.PORTS_PREFIX }}432
          
          ### Test endpoints
          ```bash
          curl http://${{ env.SERVER_HOST }}:${{ env.PORTS_PREFIX }}942/health
          curl http://${{ env.SERVER_HOST }}:${{ env.PORTS_PREFIX }}942/stats
          ```
          SUMMARY_EOF
